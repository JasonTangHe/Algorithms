package net.qiguang.algorithms.C1_Fundamentals.S3_BagsQueuesAndStacks;

/**
 * 1.3.46 Forbidden triple for stack generability.
 * Prove that a permutation can be generated by a stack (as in the previous question)
 * if and only if it has no forbidden triple (a, b, c) such that a < b < c with c first,
 * a second, and b third (possibly with other intervening integers between c and a and
 * between a and b).
 *
 * Partial solution: Suppose that there is a forbidden triple (a, b, c). Item c is popped
 * before a and b, but a and b are pushed before c. Thus, when c is pushed, both a and b
 * are on the stack. Therefore, a cannot be popped before b.
 *
 * Answer:
 * (1) Numbers are pushed onto the stack in ascending order (given).
 * (2) Because stacks are LIFO, and because of (1), if any given number is popped from
 *     the stack, any remaining numbers on the stack must be popped in descending order.
 * (3) If (a < b < c), then given (1), if c is popped before a and b, then a and b must
 *     both already be on the stack when c is popped.
 * (4) If (2) and (3) are true, then a and b must be popped in descending order if both
 *     are popped after c.
 * (5) Therefore, if c is popped first, then b must be popped before a.
 */
public class Exercise_1_3_46 {
    // Nothing to see here.
}
